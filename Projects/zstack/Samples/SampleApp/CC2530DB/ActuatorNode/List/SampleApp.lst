###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         04/Sep/2020  17:56:01 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\Source\SampleApp.c                      #
#    Command line       =  -f D:\Github\SmartHome-CC2530\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8w #
#                          Endev.cfg (-DCPU32MHZ -DROOT=__near_func           #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f D:\Github\SmartHome-CC2530\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO        #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1234                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\Github\SmartHome-CC2530\ #
#                          Projects\zstack\Samples\SampleApp\Source\SampleApp #
#                          .c -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D      #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED -D     #
#                          ACTUATOR_NODE -lC D:\Github\SmartHome-CC2530\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\ActuatorNode #
#                          \List\ -lA D:\Github\SmartHome-CC2530\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\ActuatorNode\List\  #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\ActuatorNode\Obj\ -e           #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\Github\SmartHome-CC2530\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\ -I                         #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\Source\ -I                  #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\ -I    #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\hal\ #
#                          include\ -I D:\Github\SmartHome-CC2530\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\hal\target\CC2530EB\ -I                    #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\mac\ #
#                          include\ -I D:\Github\SmartHome-CC2530\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\mac\high_level\ -I                         #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\mac\ #
#                          low_level\srf04\ -I D:\Github\SmartHome-CC2530\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\low_level\srf04\single_chip\   #
#                          -I D:\Github\SmartHome-CC2530\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\Components\m #
#                          t\ -I D:\Github\SmartHome-CC2530\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\osal\include\ -I D:\Github\SmartHome-CC2530\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\services\saddr\ -I                  #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\serv #
#                          ices\sdata\ -I D:\Github\SmartHome-CC2530\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\stack\af\ -I D:\Github\SmartHome-CC2530 #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\nwk\ -I                  #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\stac #
#                          k\sapi\ -I D:\Github\SmartHome-CC2530\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\stack\sec\ -I D:\Github\SmartHome-CC2530\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sys\ -I                     #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\stac #
#                          k\zdo\ -I D:\Github\SmartHome-CC2530\Projects\zsta #
#                          ck\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compo #
#                          nents\zmac\ -I D:\Github\SmartHome-CC2530\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\f8w\ -Ohz                          #
#    List file          =  D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\ActuatorNode\List\SampleApp.ls #
#                          t                                                  #
#    Object file        =  D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\ActuatorNode\Obj\SampleApp.r51 #
#                                                                             #
#                                                                             #
###############################################################################

D:\Github\SmartHome-CC2530\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /* 这是一份很恶心的代码，一份代码需要实现3个节点的功能，通过COORDINATOR,SENSOR_NODE,ACTUATOR_NODE三个预处理
      2           * 命令来进行区别。
      3           * SENSOR_NODE: 定时采集数据，点播发送给协调器
      4           * COORDINATOR: 接收SENSOR_NODE的数据，通过串口转发给PC机，根据数据产生指令并广播发送给ACTUATOR_NODE
      5           * ACTUATOR_NODE: 接收COORDINATOR传送的指令，执行相应的动作
      6          */
      7          
      8          #include "OSAL.h"
      9          #include "ZGlobals.h"
     10          #include "AF.h"
     11          #include "aps_groups.h"
     12          #include "ZDApp.h"
     13          #include "SampleApp.h"
     14          #include "SampleAppHw.h"
     15          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     16          #include "hal_lcd.h"
     17          #include "hal_led.h"
     18          #include "hal_key.h"
     19          #include "MT_UART.h"
     20          #include "MT_APP.h"
     21          #include "MT.h"
     22          
     23          #include "General.h" //LED驱动
     24          
     25          //根据节点不同导入不同的头文件
     26          #if defined (SENSOR_NODE) //传感节点
     27            #include "DHT11.h"            //温湿度传感器驱动
     28            #include "HCSR501.h"          //人体红外传感器驱动
     29            #include "LightIntensity.h"   //光照传感器驱动
     30            #include "YL38.h"             //火焰传感器驱动
     31          #elif defined (ACTUATOR_NODE) //执行节点
     32            #include "Beep.h"             //蜂鸣器驱动
     33            #include "Motor.h"            //步进电机驱动
     34            #include "Relay.h"            //继电器驱动
     35          #endif
     36          
     37          //根据节点不同定义不同的全局变量
     38          #if defined (ACTUATOR_NODE)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     39            static uint8 __light;       //灯，1：亮，0：灭
   \                     __light:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     40            static uint8 __beep;        //蜂鸣器，1：响，0：不响
   \                     __beep:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     41            static uint8 __motor_dir;   //电机转向，0：不转，1：顺时针，2：逆时针
   \                     __motor_dir:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     42            static uint8 __motor_speed; //电机转速，[1,10]
   \                     __motor_speed:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     43          #elif defined (COORDINATOR)
     44            static uint8 light_status;  //用于记录灯光的状态
     45            static uint8 light_count;   //用于灯光的延时熄灭
     46            static uint8 fire_status;   //用于记录火灾警报的状态
     47            static uint8 fire_count;    //用于火灾警报的鸣响延时
     48          #endif
     49          
     50          
     51          
     52          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     53          uint8 AppTitle[] = "Smart Home"; //应用程序名称
   \                     AppTitle:
   \   000000                DS 11
   \   00000B                REQUIRE `?<Initializer for AppTitle>`
   \   00000B                REQUIRE __INIT_XDATA_I
     54          

   \                                 In  segment XDATA_ROM_C, align 1
     55          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
     56          {
     57            SAMPLEAPP_PERIODIC_CLUSTERID,
     58            SAMPLEAPP_FLASH_CLUSTERID,
     59            SAMPLEAPP_P2P_CLUSTERID
     60          };
     61          

   \                                 In  segment XDATA_ROM_C, align 1
     62          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW SampleApp_ClusterList
     63          {
     64            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
     65            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
     66            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     67            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     68            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
     69            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     70            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
     71            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     72            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
     73          };
     74          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     76          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     77          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     78                                    // This variable will be received when
     79                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     80          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     81          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     82          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     83          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     84          afAddrType_t SampleApp_Periodic_DstAddr; //广播
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     85          afAddrType_t SampleApp_Flash_DstAddr;    //组播
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     86          afAddrType_t SampleApp_P2P_DstAddr;      //点播
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     87          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     90          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     91          
     92          
     93          void SampleApp_SendFlashMessage( uint16 flashTime );
     94          
     95          #if defined (SENSOR_NODE)
     96            void SensorNode_Send_Message(void);
     97          #elif defined (COORDINATOR)
     98            void Coordinator_Receive_Data(afIncomingMSGPacket_t *pckt);
     99          #elif defined (ACTUATOR_NODE)
    100            void ActuatorNode_Receive_Data(afIncomingMSGPacket_t *pckt);
    101          #endif
    102          
    103          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    104          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    105          { 
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    106            SampleApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#SampleApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    107            SampleApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    108            SampleApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#SampleApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    109            
    110          #if defined(COORDINATOR)
    111            /*串口初始化*/
    112            MT_UartInit();                  //串口初始化
    113            MT_UartRegisterTaskID(task_id); //注册串口任务
    114            HalUARTWrite(0, "uart init\n", osal_strlen("uart init\n"));
    115            /*LED初始化*/
    116            LEDInit();
    117            /*灯光变量初始化*/
    118            light_status = 0;
    119            light_count  = 0;
    120            fire_status  = 0;
    121            fire_count   = 0;
    122          #endif
    123          
    124          #if defined (SENSOR_NODE)
    125            LEDInit();
    126            DHT11Init();
    127          #endif
    128          
    129          #if defined (ACTUATOR_NODE)
    130            LEDInit();
   \   000015                ; Setup parameters for call to function LEDInit
   \   000015   12....       LCALL   ??LEDInit?relay
    131            BeepInit();
   \   000018                ; Setup parameters for call to function BeepInit
   \   000018   12....       LCALL   ??BeepInit?relay
    132            StepMotorInit();
   \   00001B                ; Setup parameters for call to function StepMotorInit
   \   00001B   12....       LCALL   ??StepMotorInit?relay
    133            RelayInit();
   \   00001E                ; Setup parameters for call to function RelayInit
   \   00001E   12....       LCALL   ??RelayInit?relay
    134          #endif
    135          
    136          
    137          #if defined ( BUILD_ALL_DEVICES )
    138            if ( readCoordinatorJumper() )
    139              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    140            else
    141              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    142          #endif // BUILD_ALL_DEVICES
    143          
    144          #if defined ( HOLD_AUTO_START )
    145            ZDOInitDevice(0);
    146          #endif
    147          
    148            /*广播配置*/ 
    149            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000021   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000024   740F         MOV     A,#0xf
   \   000026   F0           MOVX    @DPTR,A
    150            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000027   A3           INC     DPTR
   \   000028   7414         MOV     A,#0x14
   \   00002A   F0           MOVX    @DPTR,A
    151            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00002B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00002E   74FF         MOV     A,#-0x1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   F0           MOVX    @DPTR,A
    152            
    153            /*点播配置*/
    154            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;  
   \   000033   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000036   7402         MOV     A,#0x2
   \   000038   F0           MOVX    @DPTR,A
    155            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   000039   A3           INC     DPTR
   \   00003A   7414         MOV     A,#0x14
   \   00003C   F0           MOVX    @DPTR,A
    156            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            
   \   00003D   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   000040   E4           CLR     A
   \   000041   F0           MOVX    @DPTR,A
   \   000042   A3           INC     DPTR
   \   000043   F0           MOVX    @DPTR,A
    157          
    158            /*端点配置*/
    159            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000044   90....       MOV     DPTR,#SampleApp_epDesc
   \   000047   7414         MOV     A,#0x14
   \   000049   F0           MOVX    @DPTR,A
    160            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00004A   A3           INC     DPTR
   \   00004B   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000051   F0           MOVX    @DPTR,A
    161            SampleApp_epDesc.simpleDesc
    162                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000052   A3           INC     DPTR
   \   000053   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000059   F0           MOVX    @DPTR,A
    163            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00005A   A3           INC     DPTR
   \   00005B   E4           CLR     A
   \   00005C   F0           MOVX    @DPTR,A
    164          
    165            // Register the endpoint description with the AF
    166            afRegister( &SampleApp_epDesc );
   \   00005D                ; Setup parameters for call to function afRegister
   \   00005D   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00005F   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000061   12....       LCALL   ??afRegister?relay
    167          
    168            // Register for all key events - This app will handle all key events
    169            RegisterForKeys( SampleApp_TaskID );
   \   000064                ; Setup parameters for call to function RegisterForKeys
   \   000064   90....       MOV     DPTR,#SampleApp_TaskID
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F9           MOV     R1,A
   \   000069   12....       LCALL   ??RegisterForKeys?relay
    170          }
   \   00006C   7F01         MOV     R7,#0x1
   \   00006E   02....       LJMP    ?BANKED_LEAVE_XDATA
    171          
    172          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    173          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    174          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    175            afIncomingMSGPacket_t *MSGpkt;
    176            (void)task_id;  // Intentionally unreferenced parameter
    177          
    178            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   6044         JZ      ??SampleApp_ProcessEvent_0
    179            {
    180              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   800D         SJMP    ??SampleApp_ProcessEvent_1
    181              while ( MSGpkt )
    182              {
    183                switch ( MSGpkt->hdr.event )
    184                {
    185                  case AF_INCOMING_MSG_CMD:
    186                    #if defined (COORDINATOR) //协调器接收SENSOR_NODE的数据
    187                      Coordinator_Receive_Data(MSGpkt);
    188                    #elif defined (ACTUATOR_NODE) //ACTUATOR_NODE接收协调器的指令
    189                      ActuatorNode_Receive_Data(MSGpkt);
    190                    #endif
    191                    break;
    192          
    193                  case ZDO_STATE_CHANGE:
    194                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   90....       MOV     DPTR,#SampleApp_NwkState
   \   000015   F0           MOVX    @DPTR,A
    195                    if ((SampleApp_NwkState == DEV_END_DEVICE) )
    196                    {
    197                    #if defined (SENSOR_NODE) //只有传感节点需要定期发送数据
    198                      //启动定时器，每隔1s采集一次数据并发送
    199                      osal_start_timerEx( SampleApp_TaskID,
    200                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    201                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
    202          
    203                    #endif
    204                    }
    205                    else
    206                    {
    207                      // Device is no longer in the network
    208                    }
    209                    break;
    210          
    211                  default:
    212                    break;
    213                }
    214          
    215                // Release the memory
    216                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_3:
   \   000016                ; Setup parameters for call to function osal_msg_deallocate
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??osal_msg_deallocate?relay
    217          
    218                // Next - if one is available
    219                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00001D                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00001D   90....       MOV     DPTR,#SampleApp_TaskID
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   ??osal_msg_receive?relay
   \   000025   8A..         MOV     ?V0 + 2,R2
   \   000027   8B..         MOV     ?V0 + 3,R3
   \   000029   AE..         MOV     R6,?V0 + 2
   \   00002B   AF..         MOV     R7,?V0 + 3
   \   00002D   EE           MOV     A,R6
   \   00002E   4F           ORL     A,R7
   \   00002F   6018         JZ      ??SampleApp_ProcessEvent_4
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   E0           MOVX    A,@DPTR
   \   000036   24E6         ADD     A,#-0x1a
   \   000038   6006         JZ      ??SampleApp_ProcessEvent_5
   \   00003A   2449         ADD     A,#0x49
   \   00003C   60D2         JZ      ??SampleApp_ProcessEvent_2
   \   00003E   80D6         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   000040                ; Setup parameters for call to function ActuatorNode_Receive_Data
   \   000040   EE           MOV     A,R6
   \   000041   FA           MOV     R2,A
   \   000042   EF           MOV     A,R7
   \   000043   FB           MOV     R3,A
   \   000044   12....       LCALL   ??ActuatorNode_Receive_Data?relay
   \   000047   80CD         SJMP    ??SampleApp_ProcessEvent_3
    220              }
    221          
    222              // return unprocessed events
    223              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   000049   AA..         MOV     R2,?V0 + 0
   \   00004B   E5..         MOV     A,?V0 + 1
   \   00004D   6480         XRL     A,#0x80
   \   00004F   FB           MOV     R3,A
   \   000050   8029         SJMP    ??SampleApp_ProcessEvent_6
    224            }
    225          
    226            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000052   EA           MOV     A,R2
   \   000053   A2E0         MOV     C,0xE0 /* A   */.0
   \   000055   5020         JNC     ??SampleApp_ProcessEvent_7
    227            {
    228              //只有SensorNode主动发送数据
    229            #if defined (SENSOR_NODE)
    230              SensorNode_Send_Message();
    231            #endif
    232              // Setup to send message again in normal period (+ a little jitter)
    233              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    234                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000057                ; Setup parameters for call to function osal_rand
   \   000057   12....       LCALL   ??osal_rand?relay
   \   00005A                ; Setup parameters for call to function osal_start_timerEx
   \   00005A   EA           MOV     A,R2
   \   00005B   24E8         ADD     A,#-0x18
   \   00005D   FC           MOV     R4,A
   \   00005E   E4           CLR     A
   \   00005F   3403         ADDC    A,#0x3
   \   000061   FD           MOV     R5,A
   \   000062   7A01         MOV     R2,#0x1
   \   000064   7B00         MOV     R3,#0x0
   \   000066   90....       MOV     DPTR,#SampleApp_TaskID
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??osal_start_timerEx?relay
    235          
    236              // return unprocessed events
    237              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   00006E   E5..         MOV     A,?V0 + 0
   \   000070   6401         XRL     A,#0x1
   \   000072   FA           MOV     R2,A
   \   000073   AB..         MOV     R3,?V0 + 1
   \   000075   8004         SJMP    ??SampleApp_ProcessEvent_6
    238            }
    239          
    240            // Discard unknown events
    241            return 0;
   \                     ??SampleApp_ProcessEvent_7:
   \   000077   7A00         MOV     R2,#0x0
   \   000079   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_6:
   \   00007B   7F04         MOV     R7,#0x4
   \   00007D   02....       LJMP    ?BANKED_LEAVE_XDATA
    242          }
    243          
    244          
    245          #if defined (SENSOR_NODE)
    246          void SensorNode_Send_Message( void )
    247          {
    248            uint8 temp,humid,light,human,flame;  //温度、湿度、光照、人体红外、火焰
    249            char str_temp[3];             //2个字符的温度显示数据
    250            char str_humid[3];            //2个字符的湿度显示数据
    251            uint8 msg[5];                  //通过无线发送的数据
    252          
    253          
    254            DHT11(&temp, &humid); //获取温湿度
    255            light = LightOn();    //获取光照强度
    256            human = HCSR501On();  //获取人体红外
    257            flame = YL38On();     //获取火焰
    258            
    259            /*输出到LCD显示*/
    260            Color    = BLACK;
    261            Color_BK = WHITE;
    262            //温度
    263            str_temp[0] = (temp / 10) + 48;  //温度十位
    264            str_temp[1] = (temp % 10) + 48;  //温度个位
    265            str_temp[2] = '\0';
    266            LCD_write_CN_string(7,  50, "温度：");
    267            LCD_write_EN_string(49, 50, str_temp);
    268            LCD_write_CN_string(63, 50, "℃");
    269            //湿度
    270            str_humid[0] = (humid / 10) + 48;  //湿度十位
    271            str_humid[1] = (humid % 10) + 48;  //湿度个位
    272            str_humid[2] = '\0';
    273            LCD_write_CN_string(7,  65, "湿度：");     
    274            LCD_write_EN_string(49, 65, str_humid );
    275            LCD_write_CN_string(63, 65, "％");
    276            //光照
    277            LCD_write_CN_string(7, 80, "光照：");
    278            if(light == 1)
    279              LCD_write_CN_string(49, 80, "白天");
    280            else 
    281              LCD_write_CN_string(49, 80, "黑夜");
    282            //人体红外
    283            LCD_write_CN_string(7,    95, "红外：");
    284            if(human == 1)
    285              LCD_write_CN_string(49, 95, "有人");
    286            else
    287              LCD_write_CN_string(49, 95, "无人");
    288            //火焰
    289            LCD_write_CN_string(7,    110, "火焰：");
    290            if(flame == 1)
    291              LCD_write_CN_string(49, 110, "有");
    292            else
    293              LCD_write_CN_string(49, 110, "无");
    294          
    295          
    296          
    297            /*点播发送给协调器*/
    298            msg[0] = temp; msg[1] = humid; msg[2] = light; msg[3] = human; msg[4] = flame;
    299            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    300                                 SAMPLEAPP_P2P_CLUSTERID,
    301                                 5,
    302                                 msg,
    303                                 &SampleApp_TransID,
    304                                 AF_DISCV_ROUTE,
    305                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    306            {
    307            }
    308            else
    309            {
    310              // Error occurred in request to send.
    311            }
    312          
    313            LED2FLIP;
    314          }
    315          #endif
    316          
    317          
    318          
    319          #if defined (COORDINATOR)
    320          void Coordinator_Receive_Data(afIncomingMSGPacket_t *pkt)
    321          {
    322            uint8 control_cmd[4]; //控制命令，分别为__light,__beep,__motor_dir,__motor_speed的值
    323            uint8 uart_data[10];   //通过UART串口发送给PC机的数据，依次为pkt->cmd.Data和control_cmd的值，以及前9个数的和(用于数据校验)
    324            switch(pkt->clusterId)
    325            {
    326              case SAMPLEAPP_P2P_CLUSTERID: //协调器收到传感节点的点播数据
    327                /*简单的控制算法*/
    328                //灯光
    329                if( (pkt->cmd.Data[2] == 0) && (pkt->cmd.Data[3] == 1) ) //黑夜且有人则开灯
    330                {
    331                  control_cmd[0] = 1;
    332                  light_status = 1;
    333                }
    334                else //不满足黑夜且有人的条件，可能是人体红外传感器的探测问题，如果灯已开，延时60s再关
    335                {
    336                  if( (light_status == 1) && (light_count < 60) )
    337                  {
    338                    light_count++;
    339                    control_cmd[0] = 1;
    340                  }
    341                  else
    342                  {
    343                    light_status = 0;
    344                    light_count = 0;
    345                    control_cmd[0] = 0;
    346                  }
    347                }
    348                //蜂鸣器
    349                if(pkt->cmd.Data[4] == 1) //火焰传感器检测到火焰
    350                {
    351                  fire_status = 1;
    352                  control_cmd[1] = 1;
    353                }
    354                else
    355                {
    356                  if((fire_status == 1) && (fire_count < 60) ) //连续警报60s
    357                  {
    358                    fire_count++;
    359                    control_cmd[1] = 1;
    360                  }
    361                  else
    362                  {
    363                    fire_status = 0;
    364                    fire_count  = 0;
    365                    control_cmd[1] = 0;
    366                  }
    367                }
    368                
    369                //步进电机
    370                if(pkt->cmd.Data[0] < 15) //制热
    371                {
    372                  control_cmd[2] = 1;
    373                  if(pkt->cmd.Data[0] > 10)
    374                    control_cmd[3] = 1;
    375                  else if(pkt->cmd.Data[0] > 5)
    376                    control_cmd[3] = 2;
    377                  else
    378                    control_cmd[3] = 3;
    379                }
    380                else if(pkt->cmd.Data[0] > 25) //制冷
    381                {
    382                  control_cmd[2] = 2;
    383                  if(pkt->cmd.Data[0] <30)
    384                    control_cmd[3] = 1;
    385                  else if(pkt->cmd.Data[0] < 35)
    386                    control_cmd[3] = 2;
    387                  else
    388                    control_cmd[3] = 3;
    389                }
    390                else //停转
    391                {
    392                  control_cmd[2] = 0;
    393                  control_cmd[3] = 0;
    394                }
    395          
    396                /*将操作指令通过广播发送到Actuator Node*/
    397                AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    398                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    399                                 4,
    400                                 control_cmd,
    401                                 &SampleApp_TransID,
    402                                 AF_DISCV_ROUTE,
    403                                 AF_DEFAULT_RADIUS );
    404          
    405                /*将数据转发到PC机*/
    406                uart_data[0] = pkt->cmd.Data[0]; 
    407                uart_data[1] = pkt->cmd.Data[1]; 
    408                uart_data[2] = pkt->cmd.Data[2]; 
    409                uart_data[3] = pkt->cmd.Data[3]; 
    410                uart_data[4] = pkt->cmd.Data[4];
    411                uart_data[5] = control_cmd[0];
    412                uart_data[6] = control_cmd[1];
    413                uart_data[7] = control_cmd[2];
    414                uart_data[8] = control_cmd[3];
    415                uart_data[9] = uart_data[0] + uart_data[1] + uart_data[2] + uart_data[3] + uart_data[4] + uart_data[5] + uart_data[6] + uart_data[7] + uart_data[8];
    416                HalUARTWrite(0, uart_data, 10);
    417          
    418                LED2FLIP;
    419                break;
    420            }
    421          }
    422          #endif
    423          
    424          
    425          
    426          #if defined (ACTUATOR_NODE)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    427          void ActuatorNode_Receive_Data(afIncomingMSGPacket_t *pkt)
   \                     ActuatorNode_Receive_Data:
    428          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    429            uint8 str_speed[3];
    430          
    431            switch(pkt->clusterId) //执行器接收到协调器广播的数据
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   6401         XRL     A,#0x1
   \   000014   7002         JNZ     ??ActuatorNode_Receive_Data_0
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \                     ??ActuatorNode_Receive_Data_0:
   \   000018   6003         JZ      $+5
   \   00001A   02....       LJMP    ??ActuatorNode_Receive_Data_1 & 0xFFFF
    432            {
    433              case SAMPLEAPP_PERIODIC_CLUSTERID:
    434                /*修改外设控制变量的值，并且在LCD上显示*/
    435                __light       = pkt->cmd.Data[0];
   \   00001D   EA           MOV     A,R2
   \   00001E   2422         ADD     A,#0x22
   \   000020   F8           MOV     R0,A
   \   000021   EB           MOV     A,R3
   \   000022   3400         ADDC    A,#0x0
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000028   E0           MOVX    A,@DPTR
   \   000029   90....       MOV     DPTR,#__light
   \   00002C   12....       LCALL   ?Subroutine1 & 0xFFFF
    436                __beep        = pkt->cmd.Data[1];
   \                     ??CrossCallReturnLabel_2:
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   90....       MOV     DPTR,#__beep
   \   000033   12....       LCALL   ?Subroutine1 & 0xFFFF
    437                __motor_dir   = pkt->cmd.Data[2];
   \                     ??CrossCallReturnLabel_3:
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   90....       MOV     DPTR,#__motor_dir
   \   00003B   F0           MOVX    @DPTR,A
    438                __motor_speed = pkt->cmd.Data[3];
   \   00003C   8882         MOV     DPL,R0
   \   00003E   8983         MOV     DPH,R1
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F8           MOV     R0,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F583         MOV     DPH,A
   \   000046   8882         MOV     DPL,R0
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   90....       MOV     DPTR,#__motor_speed
   \   00004F   F0           MOVX    @DPTR,A
    439                str_speed[0] = (__motor_speed / 10) + 48;
   \   000050   75F00A       MOV     B,#0xa
   \   000053   84           DIV     AB
   \   000054   2430         ADD     A,#0x30
   \   000056   85..82       MOV     DPL,?XSP + 0
   \   000059   85..83       MOV     DPH,?XSP + 1
   \   00005C   F0           MOVX    @DPTR,A
    440                str_speed[1] = (__motor_speed % 10) + 48;
   \   00005D   90....       MOV     DPTR,#__motor_speed
   \   000060   E0           MOVX    A,@DPTR
   \   000061   75F00A       MOV     B,#0xa
   \   000064   84           DIV     AB
   \   000065   E5F0         MOV     A,B
   \   000067   2430         ADD     A,#0x30
   \   000069   C0E0         PUSH    A
   \   00006B   7401         MOV     A,#0x1
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   D0E0         POP     A
   \   000072   F0           MOVX    @DPTR,A
    441                str_speed[2] = '\0';
   \   000073   7402         MOV     A,#0x2
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   E4           CLR     A
   \   000079   F0           MOVX    @DPTR,A
    442                //灯光
    443                LCD_write_CN_string(  7,  50, "灯光：");
   \   00007A                ; Setup parameters for call to function LCD_write_CN_string
   \   00007A   7C..         MOV     R4,#`?<Constant "\\265\\306\\271\\342\\243\\272">` & 0xff
   \   00007C   7D..         MOV     R5,#(`?<Constant "\\265\\306\\271\\342\\243\\272">` >> 8) & 0xff
   \   00007E   7A32         MOV     R2,#0x32
   \   000080   7907         MOV     R1,#0x7
   \   000082   12....       LCALL   ??LCD_write_CN_string?relay
    444                if(__light)
   \   000085   90....       MOV     DPTR,#__light
   \   000088   E0           MOVX    A,@DPTR
   \   000089   6009         JZ      ??ActuatorNode_Receive_Data_2
    445                {
    446                  RelayOn();
   \   00008B                ; Setup parameters for call to function RelayOn
   \   00008B   12....       LCALL   ??RelayOn?relay
    447                  LCD_write_CN_string(49, 50, "开");
   \   00008E                ; Setup parameters for call to function LCD_write_CN_string
   \   00008E   7C..         MOV     R4,#`?<Constant "\\277\\252">` & 0xff
   \   000090   7D..         MOV     R5,#(`?<Constant "\\277\\252">` >> 8) & 0xff
   \   000092   8007         SJMP    ??ActuatorNode_Receive_Data_3
    448                }
    449                else
    450                {
    451                  RelayOff();
   \                     ??ActuatorNode_Receive_Data_2:
   \   000094                ; Setup parameters for call to function RelayOff
   \   000094   12....       LCALL   ??RelayOff?relay
    452                  LCD_write_CN_string(49, 50, "关");
   \   000097                ; Setup parameters for call to function LCD_write_CN_string
   \   000097   7C..         MOV     R4,#`?<Constant "\\271\\330">` & 0xff
   \   000099   7D..         MOV     R5,#(`?<Constant "\\271\\330">` >> 8) & 0xff
   \                     ??ActuatorNode_Receive_Data_3:
   \   00009B   7A32         MOV     R2,#0x32
   \   00009D   7931         MOV     R1,#0x31
   \   00009F   12....       LCALL   ??LCD_write_CN_string?relay
    453                }
    454                //火警
    455                LCD_write_CN_string(  7,  65, "火警：");
   \   0000A2                ; Setup parameters for call to function LCD_write_CN_string
   \   0000A2   7C..         MOV     R4,#`?<Constant "\\273\\360\\276\\257\\243\\272">` & 0xff
   \   0000A4   7D..         MOV     R5,#(`?<Constant "\\273\\360\\276\\257\\243\\272">` >> 8) & 0xff
   \   0000A6   7A41         MOV     R2,#0x41
   \   0000A8   7907         MOV     R1,#0x7
   \   0000AA   12....       LCALL   ??LCD_write_CN_string?relay
    456                if(__beep)
   \   0000AD   90....       MOV     DPTR,#__beep
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   6013         JZ      ??ActuatorNode_Receive_Data_4
    457                {
    458                  LCD_write_CN_string(49, 65, "开");
   \   0000B3                ; Setup parameters for call to function LCD_write_CN_string
   \   0000B3   7C..         MOV     R4,#`?<Constant "\\277\\252">` & 0xff
   \   0000B5   7D..         MOV     R5,#(`?<Constant "\\277\\252">` >> 8) & 0xff
   \   0000B7   7A41         MOV     R2,#0x41
   \   0000B9   7931         MOV     R1,#0x31
   \   0000BB   12....       LCALL   ??LCD_write_CN_string?relay
    459                  Beep(255); Beep(255); Beep(255); Beep(255); Beep(255);
   \   0000BE                ; Setup parameters for call to function Beep
   \   0000BE   12....       LCALL   ?Subroutine0 & 0xFFFF
    460                  Beep(255); Beep(255); Beep(255); Beep(255); Beep(255);
    461                  Beep(255); Beep(255); Beep(255); Beep(255); Beep(255);
   \                     ??CrossCallReturnLabel_0:
   \   0000C1                ; Setup parameters for call to function Beep
   \   0000C1   12....       LCALL   ?Subroutine0 & 0xFFFF
    462                  Beep(255); Beep(255); Beep(255); Beep(255); Beep(255);      
    463                }
   \                     ??CrossCallReturnLabel_1:
   \   0000C4   800B         SJMP    ??ActuatorNode_Receive_Data_5
    464                else
    465                {
    466                  LCD_write_CN_string(49, 65, "关");
   \                     ??ActuatorNode_Receive_Data_4:
   \   0000C6                ; Setup parameters for call to function LCD_write_CN_string
   \   0000C6   7C..         MOV     R4,#`?<Constant "\\271\\330">` & 0xff
   \   0000C8   7D..         MOV     R5,#(`?<Constant "\\271\\330">` >> 8) & 0xff
   \   0000CA   7A41         MOV     R2,#0x41
   \   0000CC   7931         MOV     R1,#0x31
   \   0000CE   12....       LCALL   ??LCD_write_CN_string?relay
    467                }
    468                //空调
    469                LCD_write_CN_string(    7, 80, "空调：");
   \                     ??ActuatorNode_Receive_Data_5:
   \   0000D1                ; Setup parameters for call to function LCD_write_CN_string
   \   0000D1   7C..         MOV     R4,#`?<Constant "\\277\\325\\265\\367\\243\\272">` & 0xff
   \   0000D3   7D..         MOV     R5,#(`?<Constant "\\277\\325\\265\\367\\243\\272">` >> 8) & 0xff
   \   0000D5   7A50         MOV     R2,#0x50
   \   0000D7   7907         MOV     R1,#0x7
   \   0000D9   12....       LCALL   ??LCD_write_CN_string?relay
    470                if(__motor_dir)
   \   0000DC   90....       MOV     DPTR,#__motor_dir
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   6010         JZ      ??ActuatorNode_Receive_Data_6
    471                {
    472                  if(__motor_dir == 1)
   \   0000E2   6401         XRL     A,#0x1
   \   0000E4   7006         JNZ     ??ActuatorNode_Receive_Data_7
    473                    LCD_write_CN_string(49, 80, "制热");
   \   0000E6                ; Setup parameters for call to function LCD_write_CN_string
   \   0000E6   7C..         MOV     R4,#`?<Constant "\\326\\306\\310\\310">` & 0xff
   \   0000E8   7D..         MOV     R5,#(`?<Constant "\\326\\306\\310\\310">` >> 8) & 0xff
   \   0000EA   800A         SJMP    ??ActuatorNode_Receive_Data_8
    474                  else
    475                    LCD_write_CN_string(49, 80, "制冷");
   \                     ??ActuatorNode_Receive_Data_7:
   \   0000EC                ; Setup parameters for call to function LCD_write_CN_string
   \   0000EC   7C..         MOV     R4,#`?<Constant "\\326\\306\\300\\344">` & 0xff
   \   0000EE   7D..         MOV     R5,#(`?<Constant "\\326\\306\\300\\344">` >> 8) & 0xff
   \   0000F0   8004         SJMP    ??ActuatorNode_Receive_Data_8
    476                }
    477                else
    478                {
    479                  LCD_write_CN_string(  49, 80, "关闭");
   \                     ??ActuatorNode_Receive_Data_6:
   \   0000F2                ; Setup parameters for call to function LCD_write_CN_string
   \   0000F2   7C..         MOV     R4,#`?<Constant "\\271\\330\\261\\325">` & 0xff
   \   0000F4   7D..         MOV     R5,#(`?<Constant "\\271\\330\\261\\325">` >> 8) & 0xff
   \                     ??ActuatorNode_Receive_Data_8:
   \   0000F6   7A50         MOV     R2,#0x50
   \   0000F8   7931         MOV     R1,#0x31
   \   0000FA   12....       LCALL   ??LCD_write_CN_string?relay
    480                }
    481                //
    482                LCD_write_CN_string(7, 95, "功率：");
   \   0000FD                ; Setup parameters for call to function LCD_write_CN_string
   \   0000FD   7C..         MOV     R4,#`?<Constant "\\271\\246\\302\\312\\243\\272">` & 0xff
   \   0000FF   7D..         MOV     R5,#(`?<Constant "\\271\\246\\302\\312\\243\\272">` >> 8) & 0xff
   \   000101   7A5F         MOV     R2,#0x5f
   \   000103   7907         MOV     R1,#0x7
   \   000105   12....       LCALL   ??LCD_write_CN_string?relay
    483                LCD_write_EN_string(49, 95, str_speed);
   \   000108                ; Setup parameters for call to function LCD_write_EN_string
   \   000108   85..82       MOV     DPL,?XSP + 0
   \   00010B   85..83       MOV     DPH,?XSP + 1
   \   00010E   AC82         MOV     R4,DPL
   \   000110   AD83         MOV     R5,DPH
   \   000112   7A5F         MOV     R2,#0x5f
   \   000114   7931         MOV     R1,#0x31
   \   000116   12....       LCALL   ??LCD_write_EN_string?relay
    484                if(__motor_dir)
   \   000119   90....       MOV     DPTR,#__motor_dir
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   6012         JZ      ??ActuatorNode_Receive_Data_9
    485                {
    486                  StepMotor(__motor_dir - 1, __motor_speed, 250);
   \   00011F                ; Setup parameters for call to function StepMotor
   \   00011F   7CFA         MOV     R4,#-0x6
   \   000121   7D00         MOV     R5,#0x0
   \   000123   90....       MOV     DPTR,#__motor_speed
   \   000126   E0           MOVX    A,@DPTR
   \   000127   FA           MOV     R2,A
   \   000128   90....       MOV     DPTR,#__motor_dir
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   14           DEC     A
   \   00012D   F9           MOV     R1,A
   \   00012E   12....       LCALL   ??StepMotor?relay
    487                }
    488          		
    489                LED2FLIP;
   \                     ??ActuatorNode_Receive_Data_9:
   \   000131   D2F0         SETB    B.0
   \   000133   A291         MOV     C,0x90.1
   \   000135   30F001       JNB     B.0,??ActuatorNode_Receive_Data_10
   \   000138   B3           CPL     C
   \                     ??ActuatorNode_Receive_Data_10:
   \   000139   9291         MOV     0x90.1,C
    490                break;
    491                
    492            }
    493          }
   \                     ??ActuatorNode_Receive_Data_1:
   \   00013B   7403         MOV     A,#0x3
   \   00013D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000140   D083         POP     DPH
   \   000142   D082         POP     DPL
   \   000144   02....       LJMP    ?BRET
   \   000147                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F583         MOV     DPH,A
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000003                ; Setup parameters for call to function Beep
   \   000003                ; Setup parameters for call to function Beep
   \   000003   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   79FF         MOV     R1,#-0x1
   \   000002   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000005   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000008   12....       LCALL   ??Beep?relay
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ??Beep?relay
   \   000003                ; Setup parameters for call to function Beep
   \   000003                ; Setup parameters for call to function Beep
   \   000003                ; Setup parameters for call to function Beep
   \   000003                ; Setup parameters for call to function Beep
   \   000003                ; Setup parameters for call to function Beep
   \   000003                ; Setup parameters for call to function Beep
   \   000003                ; Setup parameters for call to function Beep
   \   000003                ; Setup parameters for call to function Beep
   \   000003   79FF         MOV     R1,#-0x1
   \   000005   12....       LCALL   ??Beep?relay
   \   000008                ; Setup parameters for call to function Beep
   \   000008                ; Setup parameters for call to function Beep
   \   000008                ; Setup parameters for call to function Beep
   \   000008                ; Setup parameters for call to function Beep
   \   000008                ; Setup parameters for call to function Beep
   \   000008                ; Setup parameters for call to function Beep
   \   000008                ; Setup parameters for call to function Beep
   \   000008                ; Setup parameters for call to function Beep
   \   000008   79FF         MOV     R1,#-0x1
   \   00000A   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   536D6172     DB "Smart Home"
   \            7420486F
   \            6D6500  

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ActuatorNode_Receive_Data?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ActuatorNode_Receive_Data

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\265\\306\\271\\342\\243\\272">`:
   \   000000   B5C6B9E2     DB "\265\306\271\342\243\272"
   \            A3BA00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\277\\252">`:
   \   000000   BFAA00       DB "\277\252"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\271\\330">`:
   \   000000   B9D800       DB "\271\330"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\273\\360\\276\\257\\243\\272">`:
   \   000000   BBF0BEAF     DB "\273\360\276\257\243\272"
   \            A3BA00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\277\\325\\265\\367\\243\\272">`:
   \   000000   BFD5B5F7     DB "\277\325\265\367\243\272"
   \            A3BA00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\326\\306\\310\\310">`:
   \   000000   D6C6C8C8     DB "\326\306\310\310"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\326\\306\\300\\344">`:
   \   000000   D6C6C0E4     DB "\326\306\300\344"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\271\\330\\261\\325">`:
   \   000000   B9D8B1D5     DB "\271\330\261\325"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\271\\246\\302\\312\\243\\272">`:
   \   000000   B9A6C2CA     DB "\271\246\302\312\243\272"
   \            A3BA00  
    494          #endif
    495          
    496          
    497          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ActuatorNode_Receive_Data          3      0     15
       -> LCD_write_CN_string           4      0      6
       -> RelayOn                       4      0      6
       -> LCD_write_CN_string           4      0      6
       -> RelayOff                      4      0      6
       -> LCD_write_CN_string           4      0      6
       -> LCD_write_CN_string           4      0      6
       -> LCD_write_CN_string           4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> Beep                          4      0      6
       -> LCD_write_CN_string           4      0      6
       -> LCD_write_CN_string           4      0      6
       -> LCD_write_CN_string           4      0      6
       -> LCD_write_CN_string           4      0      6
       -> LCD_write_CN_string           4      0      6
       -> LCD_write_CN_string           4      0      6
       -> LCD_write_EN_string           4      0      6
       -> StepMotor                     4      0      6
     SampleApp_Init                     0      0      9
       -> LEDInit                       0      0     18
       -> BeepInit                      0      0     18
       -> StepMotorInit                 0      0     18
       -> RelayInit                     0      0     18
       -> afRegister                    0      0     18
       -> RegisterForKeys               0      0     18
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> ActuatorNode_Receive_Data     0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24


   Segment part sizes:

     Function/Label                         Bytes
     --------------                         -----
     _A_P1                                     1
     __light                                   1
     __beep                                    1
     __motor_dir                               1
     __motor_speed                             1
     AppTitle                                 11
     SampleApp_ClusterList                     6
     SampleApp_SimpleDesc                     12
     SampleApp_epDesc                          6
     SampleApp_TaskID                          1
     SampleApp_NwkState                        1
     SampleApp_TransID                         1
     SampleApp_Periodic_DstAddr               12
     SampleApp_Flash_DstAddr                  12
     SampleApp_P2P_DstAddr                    12
     SampleApp_Group                          18
     SampleAppPeriodicCounter                  1
     SampleAppFlashCounter                     1
     SampleApp_Init                          113
     SampleApp_ProcessEvent                  128
     ActuatorNode_Receive_Data               327
     ?Subroutine1                              6
     ?Subroutine3                             13
     ?Subroutine0                              7
     ?Subroutine2                             12
     ?Subroutine4                             11
     ?<Initializer for AppTitle>              11
     ??SampleApp_Init?relay                    6
     ??SampleApp_ProcessEvent?relay            6
     ??ActuatorNode_Receive_Data?relay         6
     ?<Constant "\265\306\271\342\243\272">    7
     ?<Constant "\277\252">                    3
     ?<Constant "\271\330">                    3
     ?<Constant "\273\360\276\257\243\272">    7
     ?<Constant "\277\325\265\367\243\272">    7
     ?<Constant "\326\306\310\310">            5
     ?<Constant "\326\306\300\344">            5
     ?<Constant "\271\330\261\325">            5
     ?<Constant "\271\246\302\312\243\272">    7

 
 617 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
   1 byte  in segment SFR_AN
  11 bytes in segment XDATA_I
  11 bytes in segment XDATA_ID
  67 bytes in segment XDATA_ROM_C
  69 bytes in segment XDATA_Z
 
 646 bytes of CODE  memory
  67 bytes of CONST memory
   0 bytes of DATA  memory (+ 1 byte shared)
  80 bytes of XDATA memory

Errors: none
Warnings: none
