###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         04/Sep/2020  17:54:20 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\Source\Motor.c                          #
#    Command line       =  -f D:\Github\SmartHome-CC2530\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8w #
#                          Endev.cfg (-DCPU32MHZ -DROOT=__near_func           #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f D:\Github\SmartHome-CC2530\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO        #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1234                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\Github\SmartHome-CC2530\ #
#                          Projects\zstack\Samples\SampleApp\Source\Motor.c   #
#                          -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D         #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED -D     #
#                          ACTUATOR_NODE -lC D:\Github\SmartHome-CC2530\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\ActuatorNode #
#                          \List\ -lA D:\Github\SmartHome-CC2530\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\ActuatorNode\List\  #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\ActuatorNode\Obj\ -e           #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\Github\SmartHome-CC2530\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\ -I                         #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\Source\ -I                  #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\ -I    #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\hal\ #
#                          include\ -I D:\Github\SmartHome-CC2530\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\hal\target\CC2530EB\ -I                    #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\mac\ #
#                          include\ -I D:\Github\SmartHome-CC2530\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\mac\high_level\ -I                         #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\mac\ #
#                          low_level\srf04\ -I D:\Github\SmartHome-CC2530\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\low_level\srf04\single_chip\   #
#                          -I D:\Github\SmartHome-CC2530\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\Components\m #
#                          t\ -I D:\Github\SmartHome-CC2530\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\osal\include\ -I D:\Github\SmartHome-CC2530\Proj #
#                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. #
#                          \..\Components\services\saddr\ -I                  #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\serv #
#                          ices\sdata\ -I D:\Github\SmartHome-CC2530\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\stack\af\ -I D:\Github\SmartHome-CC2530 #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\Components\stack\nwk\ -I                  #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\stac #
#                          k\sapi\ -I D:\Github\SmartHome-CC2530\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\stack\sec\ -I D:\Github\SmartHome-CC2530\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\stack\sys\ -I                     #
#                          D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\stac #
#                          k\zdo\ -I D:\Github\SmartHome-CC2530\Projects\zsta #
#                          ck\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compo #
#                          nents\zmac\ -I D:\Github\SmartHome-CC2530\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\f8w\ -Ohz                          #
#    List file          =  D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\ActuatorNode\List\Motor.lst    #
#    Object file        =  D:\Github\SmartHome-CC2530\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\ActuatorNode\Obj\Motor.r51     #
#                                                                             #
#                                                                             #
###############################################################################

D:\Github\SmartHome-CC2530\Projects\zstack\Samples\SampleApp\Source\Motor.c
      1          #include "Motor.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
      2          
      3          //A,B,C,D四个输出相位
      4          #define A P0_4
      5          #define B P0_5
      6          #define C P0_6
      7          #define D P0_7
      8          
      9          /* 单八拍逆时针旋转相序表(顺时针从后往前读即可)
     10           * 低四位表示ABCD四根数据线的输出，当某一位的bit=1时经过达林顿管后输出低电平，
     11           * 这个相位的绕线就会导通，从而让转子旋转一个角度(6.625°)
     12          */

   \                                 In  segment XDATA_I, align 1, keep-with-next
     13          u8 PHASE[8] = { 0x01, 0x03, 0x02, 0x06, 0x04, 0x0c, 0x08, 0x09 };
   \                     PHASE:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for PHASE>`
   \   000008                REQUIRE __INIT_XDATA_I
     14          
     15          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     16          void StepMotorInit()
   \                     StepMotorInit:
     17          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     18            P0SEL &= 0x0f;
   \   000000   53F30F       ANL     0xf3,#0xf
     19            P0DIR |= 0xf0;
   \   000003   43FDF0       ORL     0xfd,#0xf0
     20            A = 0; B = 0; C = 0; D = 0;
   \   000006   C284         CLR     0x80.4
   \   000008   C285         CLR     0x80.5
   \   00000A   C286         CLR     0x80.6
   \   00000C   C287         CLR     0x80.7
     21          }
   \   00000E   02....       LJMP    ?BRET
   \   000011                REQUIRE P0SEL
   \   000011                REQUIRE P0DIR
   \   000011                REQUIRE _A_P0
     22           

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     23          void DelayUs(u8 n) //i=1为100us
   \                     DelayUs:
     24          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
     25            u8 i = 0;
     26            for(i=0; i<n*50; i++) //延时太短，步进电机无法正常运行
   \   000007   7E00         MOV     R6,#0x0
   \   000009   8004         SJMP    ??DelayUs_0
     27          	Delay10us();
   \                     ??DelayUs_1:
   \   00000B                ; Setup parameters for call to function Delay10us
   \   00000B   12....       LCALL   ??Delay10us?relay
   \   00000E   0E           INC     R6
   \                     ??DelayUs_0:
   \   00000F   8E..         MOV     ?V0 + 0,R6
   \   000011   EF           MOV     A,R7
   \   000012   75F032       MOV     B,#0x32
   \   000015   A4           MUL     AB
   \   000016   F8           MOV     R0,A
   \   000017   AAF0         MOV     R2,B
   \   000019   E4           CLR     A
   \   00001A   2A           ADD     A,R2
   \   00001B   F9           MOV     R1,A
   \   00001C   E5..         MOV     A,?V0 + 0
   \   00001E   98           SUBB    A,R0
   \   00001F   E4           CLR     A
   \   000020   99           SUBB    A,R1
   \   000021   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000023   65D0         XRL     A,PSW
   \   000025   33           RLC     A
   \   000026   40E3         JC      ??DelayUs_1
     28          }
   \   000028   7F02         MOV     R7,#0x2
   \   00002A   02....       LJMP    ?BANKED_LEAVE_XDATA
     29          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     30          void StepMotor(u8 dir, u8 speed, u16 count)
   \                     StepMotor:
     31          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 5,R1
   \   000007   8A..         MOV     ?V0 + 6,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
     32            u8 i,j;
     33            u8 delay_time; //控制速度，延时越大转速越慢，但是力矩增大
     34            delay_time = 5 - speed; //速度越大，延时越小(1 <= speed <= 3)
   \   00000D   7405         MOV     A,#0x5
   \   00000F   C3           CLR     C
   \   000010   95..         SUBB    A,?V0 + 6
   \   000012   F5..         MOV     ?V0 + 0,A
     35          
     36            for(i=0; i<count; i++) //输出count个脉冲
   \   000014   75..00       MOV     ?V0 + 4,#0x0
   \   000017   801C         SJMP    ??StepMotor_0
     37            {
     38            	if(dir == 0) //正转
     39            	{
     40          	  for(j=8; j>0; j--)
     41          	  {
     42          	    A = (PHASE[j-1]     ) & 0x01;
     43          	    B = (PHASE[j-1] >> 1) & 0x01;
     44          	    C = (PHASE[j-1] >> 2) & 0x01;
     45          	    D = (PHASE[j-1] >> 3) & 0x01;
     46          		DelayUs(delay_time);
     47          	  }
     48            	}
     49            	else //反转
     50            	{
     51          	  for(j=0; j<8; j++)
   \                     ??StepMotor_1:
   \   000019   75..00       MOV     ?V0 + 1,#0x0
     52          	  {
     53          	    A = (PHASE[j]     ) & 0x01;
   \                     ??StepMotor_2:
   \   00001C   85....       MOV     ?V0 + 2,?V0 + 1
   \   00001F   74..         MOV     A,#PHASE & 0xff
   \   000021   25..         ADD     A,?V0 + 2
   \   000023   F582         MOV     DPL,A
   \   000025   74..         MOV     A,#(PHASE >> 8) & 0xff
   \   000027   12....       LCALL   ?Subroutine0 & 0xFFFF
     54          	    B = (PHASE[j] >> 1) & 0x01;
     55          	    C = (PHASE[j] >> 2) & 0x01;
     56          	    D = (PHASE[j] >> 3) & 0x01;
     57          		DelayUs(delay_time);
     58          	  }
   \                     ??CrossCallReturnLabel_0:
   \   00002A   05..         INC     ?V0 + 1
   \   00002C   E5..         MOV     A,?V0 + 1
   \   00002E   C3           CLR     C
   \   00002F   9408         SUBB    A,#0x8
   \   000031   40E9         JC      ??StepMotor_2
     59            	}
   \                     ??StepMotor_3:
   \   000033   05..         INC     ?V0 + 4
   \                     ??StepMotor_0:
   \   000035   85....       MOV     ?V0 + 2,?V0 + 4
   \   000038   C3           CLR     C
   \   000039   E5..         MOV     A,?V0 + 2
   \   00003B   9E           SUBB    A,R6
   \   00003C   E4           CLR     A
   \   00003D   9F           SUBB    A,R7
   \   00003E   501D         JNC     ??StepMotor_4
   \   000040   E5..         MOV     A,?V0 + 5
   \   000042   70D5         JNZ     ??StepMotor_1
   \   000044   75..08       MOV     ?V0 + 1,#0x8
   \                     ??StepMotor_5:
   \   000047   85....       MOV     ?V0 + 2,?V0 + 1
   \   00004A   74..         MOV     A,#(PHASE + 255) & 0xff
   \   00004C   25..         ADD     A,?V0 + 2
   \   00004E   F582         MOV     DPL,A
   \   000050   74..         MOV     A,#((PHASE - 1) >> 8) & 0xff
   \   000052   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000055   15..         DEC     ?V0 + 1
   \   000057   E5..         MOV     A,?V0 + 1
   \   000059   60D8         JZ      ??StepMotor_3
   \   00005B   80EA         SJMP    ??StepMotor_5
     60            }
     61          }
   \                     ??StepMotor_4:
   \   00005D   7F07         MOV     R7,#0x7
   \   00005F   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000062                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   A2E0         MOV     C,0xE0 /* A   */.0
   \   000007   9284         MOV     0x80.4,C
   \   000009   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000B   9285         MOV     0x80.5,C
   \   00000D   A2E2         MOV     C,0xE0 /* A   */.2
   \   00000F   9286         MOV     0x80.6,C
   \   000011   A2E3         MOV     C,0xE0 /* A   */.3
   \   000013   9287         MOV     0x80.7,C
   \   000015                ; Setup parameters for call to function DelayUs
   \   000015                ; Setup parameters for call to function DelayUs
   \   000015   A9..         MOV     R1,?V0 + 0
   \   000017   12....       LCALL   ??DelayUs?relay
   \   00001A   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for PHASE>`:
   \   000000   01           DB 1
   \   000001   03           DB 3
   \   000002   02           DB 2
   \   000003   06           DB 6
   \   000004   04           DB 4
   \   000005   0C           DB 12
   \   000006   08           DB 8
   \   000007   09           DB 9

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??StepMotorInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StepMotorInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DelayUs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DelayUs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??StepMotor?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StepMotor

   Maximum stack usage in bytes:

     Function       ISTACK PSTACK XSTACK
     --------       ------ ------ ------
     DelayUs            0      0     25
       -> Delay10us     0      0     20
     StepMotor          0      0     15
       -> DelayUs       0      0     30
       -> DelayUs       0      0     30
     StepMotorInit      0      0      0


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     _A_P0                       1
     P0SEL                       1
     P0DIR                       1
     PHASE                       8
     StepMotorInit              17
     DelayUs                    45
     StepMotor                  98
     ?Subroutine0               27
     ?<Initializer for PHASE>    8
     ??StepMotorInit?relay       6
     ??DelayUs?relay             6
     ??StepMotor?relay           6

 
 187 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
   3 bytes in segment SFR_AN
   8 bytes in segment XDATA_I
   8 bytes in segment XDATA_ID
 
 213 bytes of CODE  memory
   0 bytes of DATA  memory (+ 3 bytes shared)
   8 bytes of XDATA memory

Errors: none
Warnings: none
