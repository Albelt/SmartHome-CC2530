###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         01/Aug/2020  10:38:01 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ               #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\Source\Sa #
#                          mpleApp.c                                          #
#    Command line       =  -f "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ           #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\Tools\CC2530DB\f8wEndev.cfg" (-DCPU32MHZ  #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ              #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\Tools\CC2530DB\f8wConfig.cfg"             #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x02000000          #
#                          -DZDAPP_CONFIG_PAN_ID=0x1234                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "D:\IOT\CC2530-ZigBee¿ª·¢°å #
#                          ×ÊÁÏ\µÚ5ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DH #
#                          T11\ZStack-2.5.1a\Projects\zstack\Samples\SampleAp #
#                          p\Source\SampleApp.c" -D NWK_AUTO_POLL -D          #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -lC                         #
#                          "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ              #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\List\" -lA "D:\IOT\CC2530-ZigBee¿ª·¢°å #
#                          ×ÊÁÏ\µÚ5ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DH #
#                          T11\ZStack-2.5.1a\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\EndDeviceEB\List\" --diag_suppress      #
#                          Pe001,Pa010 -o "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5 #
#                          ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZSta #
#                          ck-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\EndDeviceEB\Obj\" -e --no_code_motion --debug   #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\IOT\CC2530-ZigBee¿ª·¢° #
#                          å×ÊÁÏ\µÚ5ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11\ZStack-2.5.1a\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\" -I "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µ #
#                          Ú5ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\Source\" -I "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁ #
#                          Ï\µÚ5ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\ZMain\TI2530DB\" -I               #
#                          "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ              #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\hal\include\" -I         #
#                          "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ              #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\hal\target\CC2530EB\"    #
#                          -I "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ           #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\include\" -I         #
#                          "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ              #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\high_level\" -I      #
#                          "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ              #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\low_level\srf04\"    #
#                          -I "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ           #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\low_level\srf04\sing #
#                          le_chip\" -I "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ #
#                           zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack #
#                          -2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\mt\" -I                 #
#                          "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ              #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\osal\include\" -I        #
#                          "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ              #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\services\saddr\" -I      #
#                          "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ              #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\services\sdata\" -I      #
#                          "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ              #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\af\" -I            #
#                          "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ              #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\nwk\" -I           #
#                          "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ              #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sapi\" -I          #
#                          "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ              #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sec\" -I           #
#                          "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ              #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sys\" -I           #
#                          "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ              #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\zdo\" -I           #
#                          "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ              #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\zmac\" -I                #
#                          "D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ              #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          ..\..\..\..\..\Components\zmac\f8w\" -Ohz          #
#    List file          =  D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ               #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\List\SampleApp.lst                     #
#    Object file        =  D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ               #
#                          zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          EndDeviceEB\Obj\SampleApp.r51                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\IOT\CC2530-ZigBee¿ª·¢°å×ÊÁÏ\µÚ5ÕÂ zigbeeÐ­ÒéÕ»Ó¦ÓÃÓë×éÍø\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /*********************************************************************
      2           * INCLUDES
      3           */
      4          #include "OSAL.h"
      5          #include "ZGlobals.h"
      6          #include "AF.h"
      7          #include "aps_groups.h"
      8          #include "ZDApp.h"
      9          
     10          #include "SampleApp.h"
     11          #include "SampleAppHw.h"
     12          
     13          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1
     14          
     15          /* HAL */
     16          #include "hal_lcd.h"
     17          #include "hal_led.h"
     18          #include "hal_key.h"
     19          #include "MT_UART.h"
     20          #include "MT_APP.h"
     21          #include "MT.h"
     22          #include "DHT11.h"
     23          
     24          
     25          /*********************************************************************
     26           * MACROS
     27           */
     28          
     29          /*********************************************************************
     30           * CONSTANTS
     31           */
     32          
     33          /*********************************************************************
     34           * TYPEDEFS
     35           */
     36          
     37          /*********************************************************************
     38           * GLOBAL VARIABLES
     39           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
     40          uint8 AppTitle[] = "ALD2530 DHT11"; //Ó¦ÓÃ³ÌÐòÃû³Æ
   \                     AppTitle:
   \   000000                DS 14
   \   00000E                REQUIRE `?<Initializer for AppTitle>`
   \   00000E                REQUIRE __INIT_XDATA_I
     41          
     42          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     43          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
     44          {
     45            SAMPLEAPP_PERIODIC_CLUSTERID,
     46            SAMPLEAPP_FLASH_CLUSTERID,
     47            SAMPLEAPP_P2P_CLUSTERID
     48          };
     49          

   \                                 In  segment XDATA_ROM_C, align 1
     50          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW SampleApp_ClusterList
     51          {
     52            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
     53            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
     54            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     55            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     56            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
     57            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     58            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
     59            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     60            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
     61          };
     62          
     63          // This is the Endpoint/Interface description.  It is defined here, but
     64          // filled-in in SampleApp_Init().  Another way to go would be to fill
     65          // in the structure here and make it a "const" (in code space).  The
     66          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     67          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     68          
     69          /*********************************************************************
     70           * EXTERNAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * EXTERNAL FUNCTIONS
     75           */
     76          
     77          /*********************************************************************
     78           * LOCAL VARIABLES
     79           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     80          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     81                                    // This variable will be received when
     82                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     84          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     85          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     86          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     87          afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     90          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     91          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
     92          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     95          
     96          /*********************************************************************
     97           * LOCAL FUNCTIONS
     98           */
     99          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    100          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    101          void SampleApp_SendPeriodicMessage( void );
    102          void SampleApp_SendFlashMessage( uint16 flashTime );
    103          void SampleApp_Send_P2P_Message(void);
    104          /*********************************************************************
    105           * NETWORK LAYER CALLBACKS
    106           */
    107          
    108          /*********************************************************************
    109           * PUBLIC FUNCTIONS
    110           */
    111          
    112          /*********************************************************************
    113           * @fn      SampleApp_Init
    114           *
    115           * @brief   Initialization function for the Generic App Task.
    116           *          This is called during initialization and should contain
    117           *          any application specific initialization (ie. hardware
    118           *          initialization/setup, table initialization, power up
    119           *          notificaiton ... ).
    120           *
    121           * @param   task_id - the ID assigned by OSAL.  This ID should be
    122           *                    used to send messages and set timers.
    123           *
    124           * @return  none
    125           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    126          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    127          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    128            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    129            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    130            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    131            
    132            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    133            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    134            P0SEL &= 0x7f;                  //P0_7ÅäÖÃ³ÉÍ¨ÓÃio,DHT11ÅäÖÃ
   \   00001E   53F37F       ANL     0xf3,#0x7f
    135            
    136            // Device hardware initialization can be added here or in main() (Zmain.c).
    137            // If the hardware is application specific - add it here.
    138            // If the hardware is other parts of the device add it in main().
    139          
    140           #if defined ( BUILD_ALL_DEVICES )
    141            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    142            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    143            // together - if they are - we will start up a coordinator. Otherwise,
    144            // the device will start as a router.
    145            if ( readCoordinatorJumper() )
    146              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    147            else
    148              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    149          #endif // BUILD_ALL_DEVICES
    150          
    151          #if defined ( HOLD_AUTO_START )
    152            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    153            //  from starting the device and wait for the application to
    154            //  start the device.
    155            ZDOInitDevice(0);
    156          #endif
    157          
    158            // Setup for the periodic message's destination address
    159            // Broadcast to everyone
    160            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000021   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000024   740F         MOV     A,#0xf
   \   000026   F0           MOVX    @DPTR,A
    161            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000027   A3           INC     DPTR
   \   000028   7414         MOV     A,#0x14
   \   00002A   F0           MOVX    @DPTR,A
    162            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00002B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00002E   74FF         MOV     A,#-0x1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   F0           MOVX    @DPTR,A
    163          
    164            // Setup for the flash command's destination address - Group 1
    165            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000033   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000036   7401         MOV     A,#0x1
   \   000038   F0           MOVX    @DPTR,A
    166            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000039   A3           INC     DPTR
   \   00003A   7414         MOV     A,#0x14
   \   00003C   F0           MOVX    @DPTR,A
    167            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00003D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000040   7401         MOV     A,#0x1
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
    168            
    169            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
   \   000046   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000049   7402         MOV     A,#0x2
   \   00004B   F0           MOVX    @DPTR,A
    170            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   00004C   A3           INC     DPTR
   \   00004D   7414         MOV     A,#0x14
   \   00004F   F0           MOVX    @DPTR,A
    171            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
   \   000050   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   000053   E4           CLR     A
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   F0           MOVX    @DPTR,A
    172          
    173            // Fill out the endpoint description.
    174            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000057   90....       MOV     DPTR,#SampleApp_epDesc
   \   00005A   7414         MOV     A,#0x14
   \   00005C   F0           MOVX    @DPTR,A
    175            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00005D   A3           INC     DPTR
   \   00005E   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000064   F0           MOVX    @DPTR,A
    176            SampleApp_epDesc.simpleDesc
    177                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000065   A3           INC     DPTR
   \   000066   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00006C   F0           MOVX    @DPTR,A
    178            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00006D   A3           INC     DPTR
   \   00006E   E4           CLR     A
   \   00006F   F0           MOVX    @DPTR,A
    179          
    180            // Register the endpoint description with the AF
    181            afRegister( &SampleApp_epDesc );
   \   000070                ; Setup parameters for call to function afRegister
   \   000070   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000072   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000074   12....       LCALL   ??afRegister?relay
    182          
    183            // Register for all key events - This app will handle all key events
    184            RegisterForKeys( SampleApp_TaskID );
   \   000077                ; Setup parameters for call to function RegisterForKeys
   \   000077   90....       MOV     DPTR,#SampleApp_TaskID
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F9           MOV     R1,A
   \   00007C   12....       LCALL   ??RegisterForKeys?relay
    185          
    186            // By default, all devices start out in Group 1
    187            SampleApp_Group.ID = 0x0001;
   \   00007F   90....       MOV     DPTR,#SampleApp_Group
   \   000082   7401         MOV     A,#0x1
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   E4           CLR     A
   \   000087   F0           MOVX    @DPTR,A
    188            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   000088                ; Setup parameters for call to function osal_memcpy
   \   000088   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00008B   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00008E   F5..         MOV     ?V0 + 2,A
   \   000090   78..         MOV     R0,#?V0 + 0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000095   7C07         MOV     R4,#0x7
   \   000097   7D00         MOV     R5,#0x0
   \   000099   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00009B   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   00009D   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
    189            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A3                ; Setup parameters for call to function aps_AddGroup
   \   0000A3   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000A5   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000A7   7914         MOV     R1,#0x14
   \   0000A9   12....       LCALL   ??aps_AddGroup?relay
    190          
    191          #if defined ( LCD_SUPPORTED )
    192            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000AC                ; Setup parameters for call to function HalLcdWriteString
   \   0000AC   7900         MOV     R1,#0x0
   \   0000AE   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000B0   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000B2   12....       LCALL   ??HalLcdWriteString?relay
    193          #endif
    194          }
   \   0000B5                REQUIRE ?Subroutine0
   \   0000B5                REQUIRE P0SEL
   \   0000B5                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    195          
    196          /*********************************************************************
    197           * @fn      SampleApp_ProcessEvent
    198           *
    199           * @brief   Generic Application Task event processor.  This function
    200           *          is called to process all events for the task.  Events
    201           *          include timers, messages and any other user defined events.
    202           *
    203           * @param   task_id  - The OSAL assigned task ID.
    204           * @param   events - events to process.  This is a bit map and can
    205           *                   contain more than one event.
    206           *
    207           * @return  none
    208           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    209          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    210          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    211            afIncomingMSGPacket_t *MSGpkt;
    212            (void)task_id;  // Intentionally unreferenced parameter
    213          
    214            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    215            {
    216              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    217              while ( MSGpkt )
    218              {
    219                switch ( MSGpkt->hdr.event )
    220                {
    221                  // Received when a key is pressed
    222                  case KEY_CHANGE:
    223                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    224                    break;
    225          
    226                  // Received when a messages is received (OTA) for this endpoint
    227                  case AF_INCOMING_MSG_CMD:
    228                    SampleApp_MessageMSGCB( MSGpkt );
    229                    break;
    230          
    231                  // Received whenever the device changes state in the network
    232                  case ZDO_STATE_CHANGE:
    233                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    234                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    235                           (SampleApp_NwkState == DEV_ROUTER)
    236                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    237                    {
    238                      // Start sending the periodic message in a regular interval.
    239                      osal_start_timerEx( SampleApp_TaskID,
    240                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    241                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CD0         MOV     R4,#-0x30
   \   000020   7D07         MOV     R5,#0x7
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    242                    }
    243                    else
    244                    {
    245                      // Device is no longer in the network
    246                    }
    247                    break;
    248          
    249                  default:
    250                    break;
    251                }
    252          
    253                // Release the memory
    254                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    255          
    256                // Next - if one is available
    257                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    258              }
    259          
    260              // return unprocessed events
    261              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    262            }
    263          
    264            // Send a message out - This event is generated by a timer
    265            //  (setup in SampleApp_Init()).
    266            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    267            {
    268              // Send the periodic message
    269              //SampleApp_SendPeriodicMessage();
    270              SampleApp_Send_P2P_Message();
   \   000086                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   000086   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
    271          
    272              // Setup to send message again in normal period (+ a little jitter)
    273              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    274                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24D0         ADD     A,#-0x30
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3407         ADDC    A,#0x7
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    275          
    276              // return unprocessed events
    277              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    278            }
    279          
    280            // Discard unknown events
    281            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    282          }
    283          
    284          /*********************************************************************
    285           * Event Generation Functions
    286           */
    287          /*********************************************************************
    288           * @fn      SampleApp_HandleKeys
    289           *
    290           * @brief   Handles all key events for this device.
    291           *
    292           * @param   shift - true if in shift/alt.
    293           * @param   keys - bit field for key events. Valid entries:
    294           *                 HAL_KEY_SW_2
    295           *                 HAL_KEY_SW_1
    296           *
    297           * @return  none
    298           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    300          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    301            (void)shift;  // Intentionally unreferenced parameter
    302            
    303            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    304            {
    305              /* This key sends the Flash Command is sent to Group 1.
    306               * This device will not receive the Flash Command from this
    307               * device (even if it belongs to group 1).
    308               */
    309              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    310            }
    311          
    312            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    313            {
    314              /* The Flashr Command is sent to Group 1.
    315               * This key toggles this device in and out of group 1.
    316               * If this device doesn't belong to group 1, this application
    317               * will not receive the Flash command sent to group 1.
    318               */
    319              aps_Group_t *grp;
    320              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    321              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    322              {
    323                // Remove from the group
    324                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    325              }
    326              else
    327              {
    328                // Add to the flash group
    329                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    330              }
    331            }
    332          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   80..         SJMP    ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    333          
    334          /*********************************************************************
    335           * LOCAL FUNCTIONS
    336           */
    337          
    338          /*********************************************************************
    339           * @fn      SampleApp_MessageMSGCB
    340           *
    341           * @brief   Data message processor callback.  This function processes
    342           *          any incoming data - probably from other devices.  So, based
    343           *          on cluster ID, perform the intended action.
    344           *
    345           * @param   none
    346           *
    347           * @return  none
    348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    349          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    350          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    351            uint16 flashTime;
    352          
    353            switch ( pkt->clusterId )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0 + 1,A
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001D   0200         DW        2
   \   00001F   01           DB        1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000022   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000024   ....         DW        ??SampleApp_MessageMSGCB_2
    354            {
    355              case SAMPLEAPP_P2P_CLUSTERID:
    356                HalUARTWrite(0, "T&H:", 4);       //ÌáÊ¾½ÓÊÕµ½Êý¾Ý
   \                     ??SampleApp_MessageMSGCB_2:
   \   000026                ; Setup parameters for call to function HalUARTWrite
   \   000026   7C04         MOV     R4,#0x4
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7A..         MOV     R2,#`?<Constant "T&H:">` & 0xff
   \   00002C   7B..         MOV     R3,#(`?<Constant "T&H:">` >> 8) & 0xff
   \   00002E   7900         MOV     R1,#0x0
   \   000030   12....       LCALL   ??HalUARTWrite?relay
    357                HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength); //Êä³ö½ÓÊÕµ½µÄÊý¾Ý
   \   000033                ; Setup parameters for call to function HalUARTWrite
   \   000033   EE           MOV     A,R6
   \   000034   2420         ADD     A,#0x20
   \   000036   F582         MOV     DPL,A
   \   000038   EF           MOV     A,R7
   \   000039   3400         ADDC    A,#0x0
   \   00003B   F583         MOV     DPH,A
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FC           MOV     R4,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FD           MOV     R5,A
   \   000042   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000045   FA           MOV     R2,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FB           MOV     R3,A
   \   000049   12....       LCALL   ?Subroutine2 & 0xFFFF
    358                HalUARTWrite(0, "\n", 1);         // »Ø³µ»»ÐÐ
    359                break;    
   \                     ??CrossCallReturnLabel_0:
   \   00004C   8033         SJMP    ??SampleApp_MessageMSGCB_0
   \                     ??SampleApp_MessageMSGCB_1:
   \   00004E   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000051   F8           MOV     R0,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055                ; Setup parameters for call to function HalLedBlink
   \   000055   8882         MOV     DPL,R0
   \   000057   8983         MOV     DPH,R1
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   FA           MOV     R2,A
   \   00005C   8882         MOV     DPL,R0
   \   00005E   8983         MOV     DPH,R1
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   EA           MOV     A,R2
   \   000065   2400         ADD     A,#0x0
   \   000067   F5..         MOV     ?V0 + 0,A
   \   000069   E4           CLR     A
   \   00006A   39           ADDC    A,R1
   \   00006B   F5..         MOV     ?V0 + 1,A
   \   00006D   7402         MOV     A,#0x2
   \   00006F   78..         MOV     R0,#?V0 + 0
   \   000071   12....       LCALL   ?US_SHR
   \   000074   AC..         MOV     R4,?V0 + 0
   \   000076   AD..         MOV     R5,?V0 + 1
   \   000078   7B32         MOV     R3,#0x32
   \   00007A   7A04         MOV     R2,#0x4
   \   00007C   7908         MOV     R1,#0x8
    360              case SAMPLEAPP_PERIODIC_CLUSTERID:
    361                break;
    362          
    363              case SAMPLEAPP_FLASH_CLUSTERID:
    364                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    365                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   00007E   12....       LCALL   ??HalLedBlink?relay
    366                break;
    367            }
    368          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000081   02....       LJMP    ??Subroutine5_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C01         MOV     R4,#0x1
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00000B   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
   \   000012   22           RET
    369          
    370          
    371          /*********************************************************************
    372           * @fn      SampleApp_SendPeriodicMessage
    373           *
    374           * @brief   Send the periodic message.
    375           *
    376           * @param   none
    377           *
    378           * @return  none
    379           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine5_0
   \   000003                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    380          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    381          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    382            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    383                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    384                                 1,
    385                                 (uint8*)&SampleAppPeriodicCounter,
    386                                 &SampleApp_TransID,
    387                                 AF_DISCV_ROUTE,
    388                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042   02....       LJMP    ?Subroutine1 & 0xFFFF
    389            {
    390            }
    391            else
    392            {
    393              // Error occurred in request to send.
    394            }
    395          }
    396          
    397          /*********************************************************************
    398           * @fn      SampleApp_SendFlashMessage
    399           *
    400           * @brief   Send the flash message to group 1.
    401           *
    402           * @param   flashTime - in milliseconds
    403           *
    404           * @return  none
    405           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    406          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    407          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    408            uint8 buffer[3];
    409            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    410            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    411            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    412          
    413            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    414                                 SAMPLEAPP_FLASH_CLUSTERID,
    415                                 3,
    416                                 buffer,
    417                                 &SampleApp_TransID,
    418                                 AF_DISCV_ROUTE,
    419                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    420            {
    421            }
    422            else
    423            {
    424              // Error occurred in request to send.
    425            }
    426          }
   \   000071   7403         MOV     A,#0x3
   \   000073   02....       LJMP    ?Subroutine1 & 0xFFFF
    427          
    428          /*********************************************************************
    429           * @fn      SampleApp_Send_P2P_Message
    430           *
    431           * @brief   point to point.
    432           *
    433           * @param   none
    434           *
    435           * @return  none
    436           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    437          void SampleApp_Send_P2P_Message( void )
   \                     SampleApp_Send_P2P_Message:
    438          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    439            char temp[3], humidity[3], strTemp[7];
    440          
    441            DHT11();             //»ñÈ¡ÎÂÊª¶È
   \   00000A                ; Setup parameters for call to function DHT11
   \   00000A   12....       LCALL   ??DHT11?relay
    442          
    443            //½«ÎÂÊª¶ÈµÄ×ª»»³É×Ö·û´®,¹©LCDÏÔÊ¾  
    444            temp[0] = wendu_shi+0x30;
   \   00000D   90....       MOV     DPTR,#wendu_shi
   \   000010   E0           MOVX    A,@DPTR
   \   000011   2430         ADD     A,#0x30
   \   000013   C0E0         PUSH    A
   \   000015   7403         MOV     A,#0x3
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   D0E0         POP     A
   \   00001C   F0           MOVX    @DPTR,A
    445            temp[1] = wendu_ge+0x30;
   \   00001D   90....       MOV     DPTR,#wendu_ge
   \   000020   E0           MOVX    A,@DPTR
   \   000021   2430         ADD     A,#0x30
   \   000023   C0E0         PUSH    A
   \   000025   7404         MOV     A,#0x4
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   D0E0         POP     A
   \   00002C   F0           MOVX    @DPTR,A
    446            temp[2] = '\0';
   \   00002D   7405         MOV     A,#0x5
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
    447            humidity[0] = shidu_shi+0x30;
   \   000034   90....       MOV     DPTR,#shidu_shi
   \   000037   E0           MOVX    A,@DPTR
   \   000038   2430         ADD     A,#0x30
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   F0           MOVX    @DPTR,A
    448            humidity[1] = shidu_ge+0x30;
   \   000041   90....       MOV     DPTR,#shidu_ge
   \   000044   E0           MOVX    A,@DPTR
   \   000045   2430         ADD     A,#0x30
   \   000047   C0E0         PUSH    A
   \   000049   7401         MOV     A,#0x1
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   D0E0         POP     A
   \   000050   F0           MOVX    @DPTR,A
    449            humidity[2] = '\0';
   \   000051   7402         MOV     A,#0x2
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
    450            //½«Êý¾ÝÕûºÏºó·½±ã·¢¸øÐ­µ÷Æ÷ÏÔÊ¾
    451            osal_memcpy(strTemp, temp, 2); 
   \   000058                ; Setup parameters for call to function osal_memcpy
   \   000058   7403         MOV     A,#0x3
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   A982         MOV     R1,DPL
   \   00005F   AA83         MOV     R2,DPH
   \   000061   89..         MOV     ?V0 + 0,R1
   \   000063   8A..         MOV     ?V0 + 1,R2
   \   000065   75..00       MOV     ?V0 + 2,#0x0
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006D   7C02         MOV     R4,#0x2
   \   00006F   7D00         MOV     R5,#0x0
   \   000071   7409         MOV     A,#0x9
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
    452            osal_memcpy(&strTemp[2], " ", 1);
   \   00007C                ; Setup parameters for call to function osal_memcpy
   \   00007C   75....       MOV     ?V0 + 0,#`?<Constant " ">` & 0xff
   \   00007F   75....       MOV     ?V0 + 1,#(`?<Constant " ">` >> 8) & 0xff
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000087   7C01         MOV     R4,#0x1
   \   000089   7D00         MOV     R5,#0x0
   \   00008B   740B         MOV     A,#0xb
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
    453            osal_memcpy(&strTemp[3], humidity, 3);
   \   000096                ; Setup parameters for call to function osal_memcpy
   \   000096   85..82       MOV     DPL,?XSP + 0
   \   000099   85..83       MOV     DPH,?XSP + 1
   \   00009C   A982         MOV     R1,DPL
   \   00009E   AA83         MOV     R2,DPH
   \   0000A0   89..         MOV     ?V0 + 0,R1
   \   0000A2   8A..         MOV     ?V0 + 1,R2
   \   0000A4   78..         MOV     R0,#?V0 + 0
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A9   7C03         MOV     R4,#0x3
   \   0000AB   7D00         MOV     R5,#0x0
   \   0000AD   740C         MOV     A,#0xc
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
    454            
    455            //»ñµÃµÄÎÂÊª¶ÈÍ¨¹ý´®¿ÚÊä³öµ½µçÄÔÏÔÊ¾
    456            HalUARTWrite(0, "T&H:", 4);
   \   0000B8                ; Setup parameters for call to function HalUARTWrite
   \   0000B8   7C04         MOV     R4,#0x4
   \   0000BA   7D00         MOV     R5,#0x0
   \   0000BC   7A..         MOV     R2,#`?<Constant "T&H:">` & 0xff
   \   0000BE   7B..         MOV     R3,#(`?<Constant "T&H:">` >> 8) & 0xff
   \   0000C0   7900         MOV     R1,#0x0
   \   0000C2   12....       LCALL   ??HalUARTWrite?relay
    457            HalUARTWrite(0, (uint8 *)strTemp, 5);
   \   0000C5                ; Setup parameters for call to function HalUARTWrite
   \   0000C5   7C05         MOV     R4,#0x5
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   7406         MOV     A,#0x6
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   AA82         MOV     R2,DPL
   \   0000D0   AB83         MOV     R3,DPH
   \   0000D2   12....       LCALL   ?Subroutine2 & 0xFFFF
    458            HalUARTWrite(0, "\n",1);
    459            
    460            //Êä³öµ½LCDÏÔÊ¾
    461            Color    = BLACK;
   \                     ??CrossCallReturnLabel_1:
   \   0000D5   90....       MOV     DPTR,#Color
   \   0000D8   E4           CLR     A
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   F0           MOVX    @DPTR,A
    462            Color_BK = WHITE; //±³¾°É«  
   \   0000DC   90....       MOV     DPTR,#Color_BK
   \   0000DF   74FF         MOV     A,#-0x1
   \   0000E1   F0           MOVX    @DPTR,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   F0           MOVX    @DPTR,A
    463            LCD_write_CN_string(7, 80, "ÎÂ¶È£º");
   \   0000E4                ; Setup parameters for call to function LCD_write_CN_string
   \   0000E4   7C..         MOV     R4,#`?<Constant "\\316\\302\\266\\310\\243\\272">` & 0xff
   \   0000E6   7D..         MOV     R5,#(`?<Constant "\\316\\302\\266\\310\\243\\272">` >> 8) & 0xff
   \   0000E8   7A50         MOV     R2,#0x50
   \   0000EA   7907         MOV     R1,#0x7
   \   0000EC   12....       LCALL   ??LCD_write_CN_string?relay
    464            LCD_write_CN_string(7, 95, "Êª¶È£º");
   \   0000EF                ; Setup parameters for call to function LCD_write_CN_string
   \   0000EF   7C..         MOV     R4,#`?<Constant "\\312\\252\\266\\310\\243\\272">` & 0xff
   \   0000F1   7D..         MOV     R5,#(`?<Constant "\\312\\252\\266\\310\\243\\272">` >> 8) & 0xff
   \   0000F3   7A5F         MOV     R2,#0x5f
   \   0000F5   7907         MOV     R1,#0x7
   \   0000F7   12....       LCALL   ??LCD_write_CN_string?relay
    465            
    466            Color    = RED;
   \   0000FA   90....       MOV     DPTR,#Color
   \   0000FD   E4           CLR     A
   \   0000FE   F0           MOVX    @DPTR,A
   \   0000FF   A3           INC     DPTR
   \   000100   74F8         MOV     A,#-0x8
   \   000102   F0           MOVX    @DPTR,A
    467            HalLcdWriteEnString( 49, 80, temp );                  
   \   000103                ; Setup parameters for call to function HalLcdWriteEnString
   \   000103   7403         MOV     A,#0x3
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   AC82         MOV     R4,DPL
   \   00010A   AD83         MOV     R5,DPH
   \   00010C   7A50         MOV     R2,#0x50
   \   00010E   7931         MOV     R1,#0x31
   \   000110   12....       LCALL   ??HalLcdWriteEnString?relay
    468            HalLcdWriteEnString( 49, 95, humidity );
   \   000113                ; Setup parameters for call to function HalLcdWriteEnString
   \   000113   85..82       MOV     DPL,?XSP + 0
   \   000116   85..83       MOV     DPH,?XSP + 1
   \   000119   AC82         MOV     R4,DPL
   \   00011B   AD83         MOV     R5,DPH
   \   00011D   7A5F         MOV     R2,#0x5f
   \   00011F   7931         MOV     R1,#0x31
   \   000121   12....       LCALL   ??HalLcdWriteEnString?relay
    469            
    470            Color    = BLACK; 
   \   000124   90....       MOV     DPTR,#Color
   \   000127   E4           CLR     A
   \   000128   F0           MOVX    @DPTR,A
   \   000129   A3           INC     DPTR
   \   00012A   F0           MOVX    @DPTR,A
    471            LCD_write_CN_string(63, 80, "¡æ");
   \   00012B                ; Setup parameters for call to function LCD_write_CN_string
   \   00012B   7C..         MOV     R4,#`?<Constant "\\241\\346">` & 0xff
   \   00012D   7D..         MOV     R5,#(`?<Constant "\\241\\346">` >> 8) & 0xff
   \   00012F   7A50         MOV     R2,#0x50
   \   000131   793F         MOV     R1,#0x3f
   \   000133   12....       LCALL   ??LCD_write_CN_string?relay
    472            LCD_write_CN_string(63, 95, "£¥");
   \   000136                ; Setup parameters for call to function LCD_write_CN_string
   \   000136   7C..         MOV     R4,#`?<Constant "\\243\\245">` & 0xff
   \   000138   7D..         MOV     R5,#(`?<Constant "\\243\\245">` >> 8) & 0xff
   \   00013A   7A5F         MOV     R2,#0x5f
   \   00013C   793F         MOV     R1,#0x3f
   \   00013E   12....       LCALL   ??LCD_write_CN_string?relay
    473          
    474           
    475            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    476                                 SAMPLEAPP_P2P_CLUSTERID,
    477                                 5,
    478                                 (uint8 *)strTemp,
    479                                 &SampleApp_TransID,
    480                                 AF_DISCV_ROUTE,
    481                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000141                ; Setup parameters for call to function AF_DataRequest
   \   000141   75..1E       MOV     ?V0 + 0,#0x1e
   \   000144   78..         MOV     R0,#?V0 + 0
   \   000146   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000149   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00014C   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00014F   78..         MOV     R0,#?V0 + 0
   \   000151   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000154   7409         MOV     A,#0x9
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   8582..       MOV     ?V0 + 0,DPL
   \   00015C   8583..       MOV     ?V0 + 1,DPH
   \   00015F   78..         MOV     R0,#?V0 + 0
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000164   75..05       MOV     ?V0 + 0,#0x5
   \   000167   75..00       MOV     ?V0 + 1,#0x0
   \   00016A   78..         MOV     R0,#?V0 + 0
   \   00016C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016F   75..03       MOV     ?V0 + 0,#0x3
   \   000172   78..         MOV     R0,#?V0 + 0
   \   000174   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000177   7920         MOV     R1,#0x20
   \   000179   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00017B   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00017D   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   00017F   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   000181   12....       LCALL   ??AF_DataRequest?relay
   \   000184   7409         MOV     A,#0x9
   \   000186   12....       LCALL   ?DEALLOC_XSTACK8
    482            {
    483            }
    484            else
    485            {
    486              // Error occurred in request to send.
    487            }
    488          }
   \   000189   740D         MOV     A,#0xd
   \   00018B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018E   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004                REQUIRE ??Subroutine6_0
   \   000004                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4432     DB "ALD2530 DHT11"
   \            35333020
   \            44485431
   \            3100    

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "T&H:">`:
   \   000000   5426483A     DB "T&H:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " ">`:
   \   000000   2000         DB " "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\316\\302\\266\\310\\243\\272">`:
   \   000000   CEC2B6C8     DB "\316\302\266\310\243\272"
   \            A3BA00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\312\\252\\266\\310\\243\\272">`:
   \   000000   CAAAB6C8     DB "\312\252\266\310\243\272"
   \            A3BA00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\241\\346">`:
   \   000000   A1E600       DB "\241\346"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\243\\245">`:
   \   000000   A3A500       DB "\243\245"
    489          /*********************************************************************
    490          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     22
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalLedBlink                   0      0     20
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38
     SampleApp_Send_P2P_Message         1      0     45
       -> DHT11                         0      0     48
       -> osal_memcpy                   0      0     54
       -> osal_memcpy                   0      0     54
       -> osal_memcpy                   0      0     54
       -> HalUARTWrite                  0      0     48
       -> HalUARTWrite                  0      0     48
       -> HalUARTWrite                  0      0     48
       -> LCD_write_CN_string           0      0     48
       -> LCD_write_CN_string           0      0     48
       -> HalLcdWriteEnString           0      0     48
       -> HalLcdWriteEnString           0      0     48
       -> LCD_write_CN_string           0      0     48
       -> LCD_write_CN_string           0      0     48
       -> AF_DataRequest                0      0     66


   Segment part sizes:

     Function/Label                         Bytes
     --------------                         -----
     P0SEL                                     1
     AppTitle                                 14
     SampleApp_ClusterList                     6
     SampleApp_SimpleDesc                     12
     SampleApp_epDesc                          6
     SampleApp_TaskID                          1
     SampleApp_NwkState                        1
     SampleApp_TransID                         1
     SampleApp_Periodic_DstAddr               12
     SampleApp_Flash_DstAddr                  12
     SampleApp_P2P_DstAddr                    12
     SampleApp_Group                          18
     SampleAppPeriodicCounter                  1
     SampleAppFlashCounter                     1
     SampleApp_Init                          181
     ?Subroutine0                              5
     ??Subroutine6_0                           6
     SampleApp_ProcessEvent                  176
     SampleApp_HandleKeys                     61
     ??Subroutine5_0                           5
     SampleApp_MessageMSGCB                  132
     ?Subroutine3                             12
     ?Subroutine2                             19
     ?Subroutine1                              3
     SampleApp_SendPeriodicMessage            69
     SampleApp_SendFlashMessage              118
     SampleApp_Send_P2P_Message              401
     ?Subroutine4                              4
     ?<Initializer for AppTitle>              14
     ??SampleApp_Init?relay                    6
     ??SampleApp_ProcessEvent?relay            6
     ??SampleApp_HandleKeys?relay              6
     ??SampleApp_MessageMSGCB?relay            6
     ??SampleApp_SendPeriodicMessage?relay     6
     ??SampleApp_SendFlashMessage?relay        6
     ??SampleApp_Send_P2P_Message?relay        6
     ?<Constant "Group 1">                     8
     ?<Constant "SampleApp">                  10
     ?<Constant "T&H:">                        5
     ?<Constant "\n">                          2
     ?<Constant " ">                           2
     ?<Constant "\316\302\266\310\243\272">    7
     ?<Constant "\312\252\266\310\243\272">    7
     ?<Constant "\241\346">                    3
     ?<Constant "\243\245">                    3

 
 1 192 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
    14 bytes in segment XDATA_I
    14 bytes in segment XDATA_ID
    65 bytes in segment XDATA_ROM_C
    65 bytes in segment XDATA_Z
 
 1 248 bytes of CODE  memory
    65 bytes of CONST memory
     0 bytes of DATA  memory (+ 1 byte shared)
    79 bytes of XDATA memory

Errors: none
Warnings: none
